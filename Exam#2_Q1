# Exam#2 Q1 Swap Algorithm
# Array= [100.00 50.00 75.00 -1.00 -50.00 500.00 20.00 40.00] 

.data
Array: .double 100.00, 50.00, 75.00, -1.00, -50.00, 500.00, 20.00, -5.3125
n: .float -5.3125

.text
la $a0, Array #load the base address of Array into the parameter register $a0
li $s1, 5 # Index of the element that will be swapped with next element
          
         move $a1, $s1           # Index K
         jal  swap               # call swap procedure
        
        #Printing the value at index 5 after swapping 
        sll $t1, $a1, 3   # $t1 = k * 8
        add $t1, $a0, $t1 # $t1 = v+(k*8); #(address of v[k]) 
                        
         l.d $f12, 0($t1) # Loading the value in $f12 pair
         
         li $v0,3                # for Syscall
         syscall
         j END
         
swap: sll $t1, $a1, 3   # $t1 = k * 8
      
      add $t1, $a0, $t1 # $t1 = v+(k*8)
                        #   (address of v[k])              
                        
      l.d $f2, 0($t1)    # $f2 (temp) = v[k]
      l.d $f4, 8($t1)    # $f4 = v[k+1]
      s.d $f4, 0($t1)    # v[k] = $f4 (v[k+1])
      s.d $f2, 8($t1)    # v[k+1] = $f2 (temp)
      jr $ra            # return to calling routine
END:
nop




