# Procedure Example (Nested Procedure)
# Call a function to perform factorial of n 
.data 
n: .word 12
f: .word  0 # store the result
.text
# put the data in the argument register. 
# arguments resisters are used to pass-parameters in the procedure (function)
lw $a0, n
la $s0, f # store the location of f to store results

# Call the fact nested_procedure
jal fact
sw $v0, 0($s0) # store the return value (i.e result) from the function into f
j halt

#the nested_procedure (fact)
fact:
addi $sp, $sp, -8  # reserve space in the stack to store $a0 and $ra
		   # adjust stack for 2 items    
sw   $ra, 4($sp)      # save return address    
sw   $a0, 0($sp)      # save argument    
slti $t0, $a0, 1      # test for n < 1    
beq  $t0, $zero, L1    
addi $v0, $zero, 1    # if so, result is 1    
addi $sp, $sp, 8      #   pop 2 items from stack    
jr   $ra              #   and return
L1: addi $a0, $a0, -1     # else decrement n    
jal  fact             # recursive call    
lw   $a0, 0($sp)      # restore original n    
lw   $ra, 4($sp)      #   and return address    
addi $sp, $sp, 8      # pop 2 items from stack    
mul  $v0, $a0, $v0    # multiply to get result    
jr   $ra              # and return
halt:
nop


  
