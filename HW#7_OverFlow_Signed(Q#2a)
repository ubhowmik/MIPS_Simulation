#Detecting Overflow in signed addition
# HW#7(Q#2_a)

.data
A: .word 1000000000, 2000000000, 2000000000, -1000000000, -2000000000
B: .word 1000000000, -1000000000, 1000000000, -1000000000, -1000000000
C: .space 20 #allocting spce for storing results

.text
la $s0, A # Load Address of A
la $s1, B # Load Address of B
la $s2, C # Load Address of C

li $s3, 0 # Starting index of i
li $t5, 5 # Loop bound

li $s4,0xffffffff # Overflow Indicator

loop:
lw $t1, 0($s0) # Load A[i]
lw $t2, 0($s1) # Load B[i]

addu $t0, $t1, $t2 # $t0 = sum, but don’t trap
xor $t3, $t1, $t2 # Check if signs differ
slt $t3, $t3, $zero # $t3 = 1 if signs differ
bne $t3, $zero, No_overflow # $t1, $t2 signs ? so no overflow

xor $t3, $t0, $t1 # signs =; sign of sum match too?
# $t3 negative if sum sign different
slt $t3, $t3, $zero # $t3 = 1 if sum sign different
bne $t3, $zero, Overflow # All 3 signs ?; go to overflow

No_overflow:
sw $t0, 0($s2)
addi $s0, $s0, 4 # Go to A[i+1]
addi $s1, $s1, 4 # Go to B[i+1]
addi $s2, $s2, 4 # Go to C[i+1]
addi $s3, $s3, 1 # Increment index variable
bne $s3, $t5, loop # Compare with Loop Bound
j End

Overflow:
sw $s4, 0($s2) # Store 0xffffffff in C
addi $s0, $s0, 4 # Go to A[i+1]
addi $s1, $s1, 4 # Go to B[i+1]
addi $s2, $s2, 4 # Go to C[i+1]
addi $s3, $s3, 1 # Increment index variable
bne $s3, $t5, loop # Compare with Loop Bound

End:
nop
